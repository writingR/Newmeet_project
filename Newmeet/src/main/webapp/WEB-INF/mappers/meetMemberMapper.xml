<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- interface로 작성하 SessionDao의 풀네임을 namespace의 속성으로 사용한다 : 필수 -->

<mapper namespace="com.xy.nm.mm.dao.MeetMemberSessionDao">
	
	<resultMap type="com.xy.nm.mm.domain.MeetMemberInfo" id="resultMeetMemberInfo">
		<id property="mm_idx" column="mm_idx" />
		<result property="nidx" column="nidx" />
		<result property="m_idx" column="m_idx" />
		<result property="mm_level" column="mm_level" />
		<result property="nemail" column="nemail" />
		<result property="npw" column="npw" />
		<result property="nphoto" column="nphoto" />
		<result property="ntype" column="ntype" />
		<result property="nnic" column="nnic" />
		<result property="verify" column="verify" />
		<result property="code" column="code" />
	</resultMap>

	<!-- 모임멤버로 가입 -->
	<insert id="mmInsert" parameterType="com.xy.nm.mm.domain.MeetMemberInfo">
		INSERT INTO newMeet_RDS.mMember (nidx, m_idx, mm_level)
		VALUES (#{nidx}, #{m_idx}, #{mm_level})
	</insert>
	
	<!-- 전체 리스트 확인 -->
	<select id="selectAllList" resultMap="resultMeetMemberInfo">
		SELECT m_idx, nemail, nphoto, nnic, mm_level FROM newMeet_RDS.Member s LEFT OUTER JOIN newMeet_RDS.mMember l on s.nidx = l.nidx GROUP BY l.mm_idx ORDER BY mm_level DESC
	</select>
	
	<!-- 특정 회원 정보를  확인 -->
	<select id="selectByidx" resultMap="resultMeetMemberInfo">
		SELECT nemail, nphoto, nnic, mm_idx, m_idx, mm_level FROM newMeet_RDS.Member s LEFT OUTER JOIN newMeet_RDS.mMember l ON s.nidx = l.nidx WHERE l.m_idx = #{m_idx} AND l.mm_idx = #{mm_idx}
	</select>
	
	<!-- 특정 회원 정보를 삭제 -->
	<delete id="mmDelete">
		DELETE FROM newMeet_RDS.mMember WHERE m_idx = #{m_idx} AND mm_idx = #{mm_idx}
	</delete>
	
	<!-- 모임장으로 승격 -->
	<update id="levelUp">
		UPDATE newMeet_RDS.mMember SET mm_level = '1' where mm_idx = #{mm_idx}
	</update>
	
	<!-- 검색으로 모임 멤버 리스트 구하기 -->
	<!-- <select id="selectList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Member s 
		LEFT OUTER JOIN newMeet_RDS.mMember l ON s.nidx = l.nidx
		<where>
			l.m_idx = #{m_idx}
			<if test="stype != null">
					<if test="stype == 'both'">
						 AND (
						 <include refid="whereId"/>
						<include refid="whereNic"/>
						)
					</if>
				<if test="search.stype == 'id'">
						 AND <include refid="whereId"/>
					</if>
					<if test="search.stype == 'nic'">
						 AND <include refid="whereNic"/>
					</if>
				</if>
			</where>
			LIMIT #{index}, #{count}
	</select> --> 
	
	<!-- 특정 모임의 모임멤버 리스트 구하기 -->
	<select id="selectList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Member s 
		LEFT OUTER JOIN newMeet_RDS.mMember l 
		ON s.nidx = l.nidx
		WHERE l.m_idx = #{m_idx} 
		LIMIT #{index}, #{count}
	</select>
	
	
	<!-- 모임 멤버 리스트의 개수 -->
	<!-- <select id="selectTotalCount" parameterType="com.xy.nm.mm.domain.SearchParam" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.Member s
		LEFT OUTER JOIN newMeet_RDS.mMember l ON s.nidx = l.nidx WHERE l.m_idx = #{m_idx}
		
			<if test="stype != null">
				<if test="stype == 'both'">
					AND ( s.nemail LIKE CONCAT('%', #{keyword}, '%') OR s.nnic LIKE CONCAT('%', #{keyword}, '%') )
				</if>
				<if test="stype =='id'">
					AND s.nemail LIKE CONCAT('%', #{keyword}, '%')
				</if>
				<if test="stype =='nnic'">
					AND s.nnic LIKE CONCAT('%', #{keyword}, '%')
				</if>
			</if>
	</select> -->
	
	<!-- 모임 멤버 리스트의 개수 -->
	<select id="selectTotalCount" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.mMember WHERE m_idx = #{m_idx}
	</select>
		
	
	<sql id="whereId">
		OR s.nemail LIKE CONCAT('%', #{search.keyword}, '%')
	</sql>
	
	<sql id="whereNic">
		OR s.nnic LIKE CONCAT('%', #{search.keyword}, '%')
	</sql>
	
	
	
</mapper>

