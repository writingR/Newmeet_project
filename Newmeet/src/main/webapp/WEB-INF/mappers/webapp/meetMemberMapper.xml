<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- interface로 작성하 SessionDao의 풀네임을 namespace의 속성으로 사용한다 : 필수 -->

<mapper namespace="com.xy.nm.mm.dao.MeetMemberSessionDao">
	
	<resultMap type="com.xy.nm.mm.domain.MeetMemberInfo" id="resultMeetMemberInfo">
		<id property="mm_idx" column="mm_idx" />
		<result property="nidx" column="nidx" />
		<result property="m_idx" column="m_idx" />
		<result property="mm_level" column="mm_level" />
		<result property="nemail" column="nemail" />
		<result property="npw" column="npw" />
		<result property="nphoto" column="nphoto" />
		<result property="ntype" column="ntype" />
		<result property="nnic" column="nnic" />
		<result property="verify" column="verify" />
		<result property="code" column="code" />
		<result property="m_name" column="m_name" />
		<result property="m_img" column="m_img" />
		<result property="m_cont" column="m_cont" />
		<result property="m_stotal" column="m_stotal" />
		<result property="m_star" column="m_star" />
		<result property="m_like" column="m_like" />
		<result property="rd_idx" column="rd_idx" />
		<result property="rd_content" column="rd_content" />
		<result property="rd_date" column="rd_date" />
		<result property="r_idx" column="r_idx" />
		<result property="r_title" column="r_title" />
		<result property="r_content" column="r_content" />
		<result property="r_star" column="r_star" />
		<result property="r_date" column="r_date" />
		<result property="r_like" column="r_like" />
		<result property="r_img" column="r_img" />
	</resultMap>

	<!-- 모임멤버로 가입 -->
	<insert id="mmInsert" parameterType="com.xy.nm.mm.domain.MeetMemberInfo">
		INSERT INTO newMeet_RDS.mMember (nidx, m_idx, mm_level)
		VALUES (#{nidx}, #{m_idx}, #{mm_level})
	</insert>
	
	<!-- 전체 리스트 확인 -->
	<select id="selectAllList" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Member s LEFT OUTER JOIN newMeet_RDS.mMember l on s.nidx = l.nidx GROUP BY l.mm_idx ORDER BY mm_level DESC
	</select>
	
	<!-- 특정 회원 정보를  확인 -->
	<select id="selectByidx" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Member s LEFT OUTER JOIN newMeet_RDS.mMember l ON s.nidx = l.nidx WHERE l.m_idx = #{m_idx} AND l.nidx = #{nidx}
	</select>
	
	<!-- 특정 회원 정보를 삭제 -->
	<delete id="mmDelete">
		DELETE FROM newMeet_RDS.mMember WHERE m_idx = #{m_idx} AND mm_idx = #{mm_idx}
	</delete>
	
	<!-- 자기 스스로 모임 탈퇴 -->
	<delete id="mmDeleteSelf">
		DELETE FROM newMeet_RDS.mMember WHERE m_idx = #{m_idx} AND nidx = #{nidx}
	</delete>
	
	<!-- 모임장으로 승격 -->
	<update id="levelUp">
		UPDATE newMeet_RDS.mMember SET mm_level = '1' where mm_idx = #{mm_idx}
	</update>
	
	<!-- 특정 모임의 모임멤버 리스트 구하기 -->
	<select id="selectList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Member s 
		LEFT OUTER JOIN newMeet_RDS.mMember l 
		ON s.nidx = l.nidx
		WHERE l.m_idx = #{m_idx}
		GROUP BY l.mm_idx
		ORDER BY mm_level DESC
		LIMIT #{index}, #{count}
	</select>
	
	<!-- 모임 멤버 리스트의 개수 -->
	<select id="selectTotalCount" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.mMember WHERE m_idx = #{m_idx}
	</select>
	
	<!-- 특정 모임의 특정 유저가 작성한 리뷰 리스트 -->
	<select id="selectReviewList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.Review s
		WHERE s.nidx IN(SELECT l.nidx FROM newMeet_RDS.mMember l) 
		AND s.m_idx = #{m_idx} 
		AND s.nidx = #{nidx}
		ORDER BY r_date DESC
		LIMIT #{index}, #{count}
	</select>
	
	<!-- 특정 모임의 특정 유저가 작성한 리뷰 리스트의 개수 -->
	<select id="selectReviewListCount" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.Review s
		WHERE s.nidx IN(SELECT l.nidx FROM newMeet_RDS.mMember l) 
		AND s.m_idx = #{m_idx} 
		AND s.nidx = #{nidx}
	</select>
	
	<!-- 특정 모임의 특정 유저가 작성한 리뷰 댓글 리스트 -->
	<select id="selectRcommentList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.rComment c
		LEFT JOIN newMeet_RDS.Review r
		ON c.r_idx = r.r_idx
		WHERE c.nidx = #{nidx}
		AND r.m_idx = #{m_idx}
		ORDER BY c.rd_date DESC
		LIMIT #{index}, #{count}
	</select>

	
	<!-- 특정 모임의 특정 유저가 작성한 리뷰 댓글 리스트의 개수 -->
	<select id="selectRcommentListCount" resultType="int">
		SELECT * FROM newMeet_RDS.rComment c
		LEFT JOIN newMeet_RDS.Review r
		ON c.r_idx = r.r_idx
		WHERE c.nidx = #{nidx}
		AND r.m_idx = #{m_idx}
	</select>
	
	
	<!-- 특정 모임의 특정 유저가 가입한 모든 모임의 목록 -->
	<select id="selectMeetingList" parameterType="map" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.mMember s
		LEFT OUTER JOIN newMeet_RDS.Meeting l
		ON s.m_idx = l.m_idx
		WHERE s.nidx = #{nidx} 
		ORDER BY l.m_idx DESC
		LIMIT #{index}, #{count}
	</select>
	
	<!-- 특정 모임의 특정 유저가 가입한 모든 모임 리스트의 개수 -->
	<select id="selectMeetingListCount" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.mMember s
		LEFT OUTER JOIN newMeet_RDS.Meeting l
		ON s.m_idx = l.m_idx
		WHERE s.nidx = #{nidx}
	</select>
	
	<!-- 특정 모임에 들어온 유저가 모임멤버에 들어와있는 멤버인지 체크 -->
	<select id="checkMember" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.Member s
		LEFT OUTER JOIN newMeet_RDS.mMember l
		ON s.nidx = l.nidx
		WHERE l.m_idx = #{m_idx}
		AND l.nidx = #{nidx}
	</select>
	
	<!-- 특정 회원이 특정 모임의 모임장인지 아닌지 판단하는 SQL -->
	<select id="checkLeader" resultType="int">
		SELECT COUNT(*) FROM newMeet_RDS.Member s
		LEFT OUTER JOIN newMeet_RDS.mMember l
		ON s.nidx = l.nidx
		WHERE l.m_idx = #{m_idx}
		AND l.nidx = #{nidx}
		AND l.mm_level = #{mm_level}
		GROUP BY l.mm_idx
	</select>
	
	<!-- 위의 sql문을 보조하는 sql문 mm_level을 뽑아내기 위한 sql -->
	<select id="checkLeaderside" resultMap="resultMeetMemberInfo">
		SELECT * FROM newMeet_RDS.mMember s
		WHERE m_idx = #{m_idx}
	</select>
</mapper>

